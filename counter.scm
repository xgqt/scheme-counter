(define (make-meter init-val init-growth-procedure init-interval)
  (define val              init-val)
  (define growth-procedure init-growth-procedure)
  (define interval         init-interval)
  (lambda (method)
    (define (internal-get var)
      (case var
        ((val)              val)
        ((growth-procedure) growth-procedure)
        ((interval)         interval)
        (else               #f)
        )
      )
    (define (internal-set var new)
      (case var
        ((val)              (set! val              new))
        ((growth-procedure) (set! growth-procedure new))
        ((interval)         (set! interval         new))
        (else               #f)
        )
      )
    (define (internal-grow runs)
      (letrec
          ((loop
            (lambda (times procedure)
              (cond ((> times 0)
                     (procedure)
                     (loop (- times 1) procedure)
                     ))
              )
            ))
        (loop runs
              (lambda ()
                (internal-set 'val (growth-procedure val interval)))
              )
        )
      )
    (define (internal-run)
      (internal-grow 1)
      val
      )
    (define (internal-runs runs)
      (internal-grow runs)
      val
      )
    (cond
     ((eq? method 'get)  internal-get)
     ((eq? method 'set)  internal-set)
     ((eq? method 'grow) internal-grow)
     ((eq? method 'runs) internal-runs)
     (else               internal-run)
     )
    )
  )

(define (make-counter start)
  (make-meter start + 1)
  )
